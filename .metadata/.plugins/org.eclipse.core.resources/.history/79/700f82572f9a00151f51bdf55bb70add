/*
 * calculate.c
 *
 *  Created on: Mar 24, 2015
 *      Author: lab
 */
#include "calculate.h"
#include <math.h>
#include "mpu6050.h"
#include "hmc5883.h"
#include "function.h"
#include "delay.h"

extern float Mx_offset,My_offset,Mz_offset,Mx_gain,My_gain,Mz_gain;
extern float pitch,roll,yaw;
/*----------------------------------------------
执行校准，获取磁传感器的最大值和最小值
预处理：八字旋转法，进行归一化，各轴的测量值加上偏移乘以比例系数
简单的校准过程是：
1.在空间旋转磁传感器，找出各敏感周最大值和最小值
2.-(max+min)/2来计算各轴的偏移，相当于原点相对于椭球心的偏移
3.令X轴的比例系数x_gain=1
4.y_gain = x_gain * (y_max-y_min)/(x_max-x_min);
5.z_gain = x_gain * (z_max-z_min)/(x_max-x_min);
参考：http://www.amobbs.com/thread-5483833-1-11.html
----------------------------------------------*/
void Calibration_mag(void)
{
	short Mx,My,Mz;
	short max_Mx,max_My,max_Mz,min_Mx,min_My,min_Mz=0;
    while( !time_10s )
    {
       get_mag(&Mx,&My,&Mz);
       if ( (Mx>max_Mx)&&(Mx!=4096) ) max_Mx = Mx;
          else if ( (Mx<min_Mx)&&(Mx!=-4096) ) min_Mx = Mx;
       if ( (My>max_My)&&(My!=4096) ) max_My = My;
          else if ( (My<min_My)&&(My!=-4096) ) min_My = My;
       if ( (Mz>max_Mz)&&(Mz!=4096) )max_Mz = Mz;
          else if ( (Mz<min_Mz)&&(Mz!=-4096) )min_Mz = Mz;
       time_delay_us(1000);
    }
     
    Mx_offset = -(max_Mx + min_Mx)/2;
    My_offset = -(max_My + min_My)/2;
    Mz_offset = -(max_Mz + min_Mz)/2;
    Mx_gain = 1; 
    My_gain = Mx_gain * (max_My-min_My)/(max_Mx-min_Mx);
    Mz_gain = Mx_gain * (max_Mz-min_Mz)/(max_Mx-min_Mx);  
    //printf("Mx_offset=%lf,My_offset=%lf,Mz_offset=%lf,Mx_gain=%lf,My_gain=%lf,Mz_gain=%lf\n",Mx_offset,My_offset,Mz_offset,Mx_gain,My_gain,Mz_gain);     
}



/**************************ÊµÏÖº¯Êý********************************************
*实现函数:		void MPU6050_InitGyro_Offset(void)
获取陀螺仪的初始零偏常量：此时陀螺仪应该被静止，以测试静止时陀螺仪的输出；
之后在开始正常测量后，应该在线监测陀螺仪的零偏，以保证偏移不会过大
*******************************************************************************/
void Calibration_gyro(void)
{
	unsigned char i;
	int16_t temp[6];
	int32_t	tempgx=0,tempgy=0,tempgz=0;
	int32_t	tempax=0,tempay=0,tempaz=0;
	Gx_offset=0;
	Gy_offset=0;												  
	Gz_offset=0;
	for(i=0;i<50;i++)
	{
  		delay_us(100);
  		MPU6050_getMotion6(&temp[0],&temp[1],&temp[2],&temp[3],&temp[4],&temp[5]);
//  		LED_Change();
	}
 	for(i=0;i<100;i++)
	{
		delay_us(200);
		MPU6050_getMotion6(&temp[0],&temp[1],&temp[2],&temp[3],&temp[4],&temp[5]);
		tempax+= temp[0];
		tempay+= temp[1];
		tempaz+= temp[2];
		tempgx+= temp[3];
		tempgy+= temp[4];
		tempgz+= temp[5];
//		LED_Change();
	}

	Gx_offset=tempgx/100;//MPU6050_FIFO[3][10];
	Gy_offset=tempgy/100;//MPU6050_FIFO[4][10];
	Gz_offset=tempgz/100;//MPU6050_FIFO[5][10];
	tempax/=100;
	tempay/=100;
	tempaz/=100;
	Acc1G_Values= (float)(tempax+tempay+tempaz);
	Write_Gyro_Offset(Gx_offset,Gy_offset,Gz_offset);
	Gx_offset=0;
	Gy_offset=0;
	Gz_offset=0;
	Read_Gyro_Offset(&Gx_offset,&Gy_offset,&Gz_offset);
}




void calculate_azimuth(void)
{
	short Ax,Ay,Az,Mx,My,Mz,Gx,Gy,Gz;
	float sum,init_ax,init_ay,init_az,Mx_,My_,Mz_,Hx,Hy,Hz;
	
	get_acc(&Ax,&Ay,&Az);
	get_mag(&Mx,&My,&Mz);
	get_gyro(&Gx,&Gy,&Gz);
	printf("Ax=%d,Ay=%d,Az=%d\r\n",Ax,Ay,Az);
	
	sum = (float)Ax*Ax+(float)Ay*Ay+(float)Az*Az;
	sum = sqrtf(sum);
	
	//reference:<Using LSM303DLH for a tilt compensated electronic compass>
	init_ax = (float)-Ax/sum;
	init_ay = (float)Ay/sum;   
	init_az = (float)Az/sum;
	Mx_ =  ( (float)Mx - (float)Mx_offset ) / (float)Mx_gain ;
	My_ =  ( (float)My - (float)My_offset ) / (float)My_gain ;
	Mz_ =  ( (float)Mz - (float)Mz_offset ) / (float)Mz_gain ;    
	
	/*<Using LSM303DLH for a tilt compensated electronic compass>
	 * MPU6050 accelerometer and gyro sensing axes:(Xam,Yam,Zam) 
	 *  Zam
	 *  |  /Yam 
	 *  | /                                          
	 *  |/     
	 *  ------Xam
	 *  MPU6050 handheld device body axes with forward-right-down configuration(Xb,Yb,Zb)  
	 *         ------Xb
	 *        /|
	 *       / |
	 *      /  |
	 *    Yb   Zb
	 *    especially for acc,  Xb down:+1g;   Yb down:+1g;   Zb down:+1g
	 *    IN now pcb,the sensing axes x,y,z of acc and gyro is overthrow,so Hx and Hx is contrary in the tilt compensating
	 *    Hy = My_*cos_fast(pitch/57.3) - Mz_*sin_fast(pitch/57.3);
	 *    Hx = My_*sin_fast(pitch/57.3)*sin_fast(roll/57.3) + Mx_*cos_fast(roll/57.3) + Mz_*sin_fast(roll/57.3)*cos_fast(pitch/57.3);
	 *    Different from the calculating in <Using LSM303DLH for a tilt compensated electronic compass> 
	 * */
	//<Using LSM303DLH for a tilt compensated electronic compass>
	pitch = 57.3 * asin_fast(-init_ax);
	roll  =  asin_fast( init_ay / (cos_fast(pitch/57.3) ) ) * 57.3;
	//using LSM303DLH for a tilt compensated electronic compass
	Hy = My_*cos_fast(pitch/57.3) - Mz_*sin_fast(pitch/57.3);
	Hx = My_*sin_fast(pitch/57.3)*sin_fast(roll/57.3) + Mx_*cos_fast(roll/57.3) + Mz_*sin_fast(roll/57.3)*cos_fast(pitch/57.3);
	Hz = -Mx_*cos_fast(roll/57.3)*sin_fast(pitch/57.3)+My_*sin_fast(roll/57.3)+Mz_*cos_fast(roll/57.3)*cos_fast(pitch/57.3);
	yaw  = atan_fast(My_ , Mx_) * 57.3;
	
	
	//<9DOF姿态融合 四元数 欧拉角转换>
	//roll  = atan_fast(init_ay,init_az) * 57.3;
	//pitch = -asin_fast(init_ax)  * 57.3;
	//yaw  = -atan_fast(Mx_*cos_fast(roll) + My_*sin_fast(roll)*sin_fast(pitch) + Mz_*sin_fast(roll)*cos_fast(pitch),My_*cos_fast(pitch) - Mz_*sin_fast(pitch));  
	//yaw = yaw * 57.3;
}
